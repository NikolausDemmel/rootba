# TODO:
# - Werror release build (uninitialized variable warning for GCC and eigen matrices, which for debug/relwithdebug are initialized to NAN)


# defaults
image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:20.04
variables:
  GIT_SUBMODULE_STRATEGY: recursive
  BUILD_TYPE: CiRelWithDebInfo

stages:
  - docker-image
  - test

########################################################################
### Docker images

# build dev image and push to repository
docker-ci-image:
  stage: docker-image
  image: docker:stable
  services:
    - docker:stable-dind
  variables:
    IMAGE: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba
    DOCKER_TLS_CERTDIR: '/certs'
    GIT_SUBMODULE_STRATEGY: none
    DOCKER_DRIVER: overlay2
  only:
    - master
    - ci-test
    - ci
  when: manual
  tags:
    - docker-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd ci/docker
    - >
      FIRST=1; for tag in 22.04 20.04; do
        # fetches the latest image for cache (not failing if image is not found)
        docker pull $IMAGE:$tag || true
        docker build --pull --cache-from $IMAGE:$tag -f Dockerfile_$tag -t $IMAGE:$tag .
        docker push $IMAGE:$tag
        if [ $FIRST == 1 ]; then
          FIRST=0
          docker tag $IMAGE:$tag $IMAGE:latest
          docker push $IMAGE:latest
        fi
      done

########################################################################
### Static checks

# check if clang-format and yapf would make any changes
source-format:
  tags:
    - docker
  variables:
    GIT_SUBMODULE_STRATEGY: none
  script:
    - ./scripts/clang-format-all.sh
    - ./scripts/yapf-all.sh
    # check if any files are now modified and error if yes
    - (if [ -n "`git diff --name-only --diff-filter=M --ignore-submodules`" ]; then echo $'\n    Some files are not properly formatted. You can use "./scripts/clang-format-all.sh".\n'; git diff --diff-filter=M; false; fi)

########################################################################
### Build definitions

.compile_and_test_template: &compile_and_test_definition
  script:
    - cmake --version
    - source ./ci/scripts/install-dependencies.sh
    - time ./scripts/build-external.sh ${BUILD_TYPE}
    - time ./scripts/build-rootba.sh ${BUILD_TYPE}
    - cd build && ctest --output-on-failure


.prepare_docker_template: &prepare_docker_definition
  tags:
    - docker
  before_script:
#    - env
    - source ./ci/scripts/docker-setup-ccache.sh
  cache:
    paths:
    - ccache/
    key: ${CI_JOB_NAME}

########################################################################
### Ubuntu builds

jammy-relwithdebinfo-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:22.04
  variables:
    CC: gcc-11
    CXX: g++-11
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition

jammy-gcc12-relwithdebinfo-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:22.04
  variables:
    CC: gcc-12
    CXX: g++-12
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition

jammy-gcc12-werror-debug-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:22.04
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  variables:
    ROOTBA_CXXFLAGS: "-Werror"
    BUILD_TYPE: CiDebug

jammy-gcc12-werror-release-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:22.04
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  variables:
    ROOTBA_CXXFLAGS: "-Werror"
    BUILD_TYPE: Release

jammy-clang16-werror-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:22.04
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  variables:
    CC: clang-16
    CXX: clang++-16
    ROOTBA_CXXFLAGS: "-Werror"

jammy-clang-tidy-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:22.04
  <<: *prepare_docker_definition
  variables:
    CC: clang-16
    CXX: clang++-16
  script:
    - cmake --version
    - source ./ci/scripts/install-dependencies.sh
    - time ./scripts/build-external.sh ${BUILD_TYPE}
    - time ./scripts/build-rootba.sh ${BUILD_TYPE}
    - cd build && ctest --output-on-failure || true # allow test failure
    - cd ..
    - ./scripts/clang-tidy-all.sh
  allow_failure: true  # TODO: fix clang-tidy errors

focal-relwithdebinfo-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:20.04
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition

focal-release-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:20.04
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  only:
    - master
    - ci-test
  variables:
    BUILD_TYPE: Release

focal-debug-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:20.04
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  only:
    - master
    - ci-test
  variables:
    BUILD_TYPE: CiDebug

focal-gcc10-werror-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:20.04
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  only:
    - master
    - ci-test
  variables:
    CC: gcc-10
    CXX: g++-10
    ROOTBA_CXXFLAGS: "-Werror"

focal-asan-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:20.04
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  only:
    - master
    - ci-test
  variables:
    BUILD_TYPE: SanitizerRelWithDebInfo
    # LeakSanitizer doesn't work in (non-priviliged) container
    ASAN_OPTIONS: "detect_leaks=0"

focal-latest-tbb-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:20.04
  <<: *prepare_docker_definition
  <<: *compile_and_test_definition
  only:
    - master
    - ci-test
  variables:
    UBUNTU_INSTALL_LATEST_TBB: "1"
    TBB_ROOT: /opt/intel/tbb

focal-clang-tidy-build:
  image: $CI_REGISTRY_IMAGE/ubuntu-ci-rootba:20.04
  <<: *prepare_docker_definition
  script:
    - cmake --version
    - source ./ci/scripts/install-dependencies.sh
    - time ./scripts/build-external.sh ${BUILD_TYPE}
    - time ./scripts/build-rootba.sh ${BUILD_TYPE}
    - cd build && ctest --output-on-failure || true # allow test failure
    - cd ..
    - ./scripts/clang-tidy-all.sh
  allow_failure: true  # TODO: fix clang-tidy errors


########################################################################
### macOS builds

catalina-relwithdebinfo-build:
  <<: *compile_and_test_definition
  tags: [macos, "10.15"]
  variables:
    DBATK_USE_BREWED_LIBCXX: "ON"

catalina-brewclang-relwithdebinfo-build:
  <<: *compile_and_test_definition
  tags: [macos, "10.15"]
  variables:
    CC: /usr/local/opt/llvm/bin/clang
    CXX: /usr/local/opt/llvm/bin/clang++
  only:
    - master
    - ci-test

catalina-brewclang-asan-build:
  <<: *compile_and_test_definition
  tags: [macos, "10.15"]
  variables:
    CC: /usr/local/opt/llvm/bin/clang
    CXX: /usr/local/opt/llvm/bin/clang++
    BUILD_TYPE: SanitizerRelWithDebInfo
# don't activate leak sanitizer; seems to give false positives in system libs...
#    ASAN_OPTIONS: "detect_leaks=1"

bigsur-relwithdebinfo-build:
  <<: *compile_and_test_definition
  tags: [macos, "11", x86_64]

monterey-arm-relwithdebinfo-build:
  <<: *compile_and_test_definition
  tags: [macos, "12", arm64]

monterey-arm-brewclang-relwithdebinfo-build:
  <<: *compile_and_test_definition
  tags: [macos, "12", arm64]
  variables:
    CC: /opt/homebrew/opt/llvm/bin/clang
    CXX: /opt/homebrew/opt/llvm/bin/clang++
